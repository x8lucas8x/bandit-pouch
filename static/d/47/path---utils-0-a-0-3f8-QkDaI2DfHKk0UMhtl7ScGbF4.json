{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>Verify that a certain expectation is met, or throw a exception otherwise.</p>\n<p>This is useful for communicating assumptions in the code to other human\nreaders as well as catching bugs that accidentally violates these\nexpectations.</p>\n<p>Assertions are removed from production builds, so they can be freely added\nfor documentation and debugging purposes without worries of incurring any\nperformance penalty. However, because of that, they should not be used for\nchecks that could reasonably fail during normal usage. Furthermore, care\nshould be taken to avoid accidentally relying on side-effects produced from\nevaluating the condition itself, since the code will not run in production.</p>\n<h4>Example</h4>\n<pre><code class=\"language-javascript\">import { assert } from 'bandit-pouch';\n\nexport default function get(obj, path) {\n  assert(typeof obj === 'object', 'Object must be a Object');\n  assert(typeof path === 'string', 'Path must be a string');\n  return obj[path];\n}\n</code></pre>","frontmatter":{"id":"utils-assert","title":"Assert"}}},{"node":{"html":"<p>This library comes with a list of common Form field validators.</p>\n<h4>required</h4>\n<p>The required validator validates that the value is defined.\nThis validator will probably the most used one, it corresponds to HTML5's required attribute.</p>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Field } from 'redux-form';\nimport { Validators } from 'bandit-pouch';\n\nconst required = Validators.required('Field is required');\n\nexport default (props) => (\n  &#x3C;Field {...props} validate={required} />\n)\n</code></pre>\n<h4>regex</h4>\n<p>The format validator will validate a value against a regular expression of your chosing.\nYou can customize the error message to something more intuitive.</p>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Field } from 'redux-form';\nimport { Validators } from 'bandit-pouch';\n\nconst zip = Validators.regex(/\\d{5}(-\\d{4})?/, 'Invalid ZIP code');\n\nexport default (props) => (\n  &#x3C;Field {...props} validate={zip} />\n)\n</code></pre>\n<h4>url</h4>\n<p>The URL validator ensures that the input is a valid URL</p>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Field } from 'redux-form';\nimport { Validators } from 'bandit-pouch';\n\nconst url = Validators.url('Invalid URL');\n\nexport default (props) => (\n  &#x3C;Field {...props} validate={url} />\n)\n</code></pre>\n<h4>alpha</h4>\n<p>Validator ensures that the input contains alphanumeric characters plus empty space( ), dash(-) or underscore(_) </p>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Field } from 'redux-form';\nimport { Validators } from 'bandit-pouch';\n\nconst alpha = Validators.alpha('Invalid URL');\n\nexport default (props) => (\n  &#x3C;Field {...props} validate={alpha} />\n)\n</code></pre>\n<h4>containing</h4>\n<p>The containing validator is useful for validating input from a dropdown for example.\nIt checks that the given value exists in the list given by the within option.</p>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Field } from 'redux-form';\nimport { Validators } from 'bandit-pouch';\n\nconst validSizes = Validators.containing(['small', 'medium', 'large']);\n\nexport default (props) => (\n  &#x3C;Field {...props} validate={validSizes} />\n)\n</code></pre>\n<h4>excluding</h4>\n<p>The excluding validator is useful for restriction certain values.\nIt checks that the given value is not in the list given by the within option.</p>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Field } from 'redux-form';\nimport { Validators } from 'bandit-pouch';\n\nconst invalidSizes = Validators.excluding(['s', 'm', 'l']);\n\nexport default (props) => (\n  &#x3C;Field {...props} validate={invalidSizes} />\n)\n</code></pre>\n<h4>min</h4>\n<p>The length validator will check the length of a string, number, array or an object.\nIf the length, size or value is lower than the defined minimum, an error message is returned.</p>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Field } from 'redux-form';\nimport { Validators } from 'bandit-pouch';\n\nconst minimumAge = Validators.min(18);\n\nexport default (props) => (\n  &#x3C;Field {...props} validate={minimumAge} />\n)\n</code></pre>\n<h4>max</h4>\n<p>The length validator will check the length of a string, number, array or an object.\nIf the length, size or value is higher than the defined maximum, an error message is returned.</p>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Field } from 'redux-form';\nimport { Validators } from 'bandit-pouch';\n\nconst maximumHeight = Validators.min(5);\n\nexport default (props) => (\n  &#x3C;Field {...props} validate={maximumHeight} />\n)\n</code></pre>\n<h4>between</h4>\n<p>The length validator will check the length of a string, number, array or an object.\nIf the length, size or value is higher than the defined maximum or lower than the minimum value, an error message is returned.</p>\n<pre><code class=\"language-javascript\">import React  from 'react';\nimport { Field } from 'redux-form';\nimport { Validators } from 'bandit-pouch';\n\nconst range = Validators.between(5, 10);\n\nexport default (props) => (\n  &#x3C;Field {...props} validate={range} />\n)\n</code></pre>","frontmatter":{"id":"utils-validators","title":"Validators"}}},{"node":{"html":"<p>There are two helper methods that can be used to render Bootstrap components in your app.</p>\n<ul>\n<li><a href=\"https://react-bootstrap.github.io/components/popovers/\">Popover</a></li>\n<li><a href=\"https://react-bootstrap.github.io/components/tooltips/\">Tooltip</a></li>\n</ul>\n<h4>Example</h4>\n<pre><code class=\"language-javascript\">import { tooltip, popover } from 'bandit-pouch';\nimport { Button, OverlayTrigger } from 'react-bootstrap';\n\nexport default () => (\n  &#x3C;div>\n    &#x3C;OverlayTrigger placement=\"top\" overlay={tooltip('Tooltip text')}>\n      &#x3C;Button>Show tooltip!&#x3C;/Button>\n    &#x3C;/OverlayTrigger>\n    &#x3C;Tooltip placement=\"top\" text=\"Tooltip text\">\n      &#x3C;Button>Show tooltip!&#x3C;/Button>\n    &#x3C;/Tooltip>\n    \n    &#x3C;OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover('Popover title', 'Popover text')}>\n      &#x3C;Button>Show Popover!&#x3C;/Button>\n    &#x3C;/OverlayTrigger>\n    &#x3C;Popover placement=\"top\" title=\"Popover title\" text=\"Popover text\">\n      &#x3C;Button>Hover me!&#x3C;/Button>\n    &#x3C;/Popover>\n  &#x3C;/div>\n);\n</code></pre>","frontmatter":{"id":"utils-react","title":"React"}}},{"node":{"html":"<p>Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.</p>\n<p>Calls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincurring any performance penalty.</p>\n<h4>Example</h4>\n<pre><code class=\"language-javascript\">import { deprecate } from 'bandit-pouch';\n\nconst get = deprecate('Deprecation warning', (obj, path) => obj[path])\nconst result = get({ foo: 1 }, 'foo');\n// prints the Deprecation warning message and a stack trace\nconsole.log(result)\n// prints out 1\n</code></pre>","frontmatter":{"id":"utils-deprecate","title":"Deprecate"}}}]}},"pageContext":{}}