{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>You can use the IconButton component to render Bootstrap Buttons with a Font Awesome icons.\nIf a tooltip text parameter is provided the Button would be show a Tooltip overlay on hover.</p>\n<pre><code class=\"language-javascript\">import { IconButton, Popover, Tooltip } from 'bandit-pouch';\n\nexport default () => (\n  &#x3C;div>\n    &#x3C;IconButton icon=\"play\" bsStyle=\"primary\" />\n    &#x3C;IconButton icon=\"stop\" label=\"Stahp!\" bsStyle=\"danger\" />\n    &#x3C;Popover title=\"Login\" text=\"Enter your credentials\">\n      &#x3C;IconButton icon=\"user\" />\n    &#x3C;/Popover>\n    &#x3C;Tooltip text=\"Pause the player\">\n      &#x3C;IconButton icon=\"pause\" />\n    &#x3C;/Tooltip>\n  &#x3C;/div>\n);\n</code></pre>","frontmatter":{"id":"ui-buttons","title":"Buttons"}}},{"node":{"html":"<p>This module contains react components that can be used to define the page layout of you app.\nHere is the list of available components and how they can be used:</p>\n<pre><code class=\"language-javascript\">import {\n  Page,\n  Left,\n  Right,\n  Content,\n  TopPanel,\n  HorizontalSplit,\n} from 'bandit-pouch';\n\nconst Sidebar = () => (\n  // your sidebar component\n);\n\nconst DateLabel = ({ date }) => {\n  const instance = moment(date);\n  return (\n    &#x3C;Tooltip text={instance.format('dddd, MMMM Do YYYY, h:mm a')} placement=\"right\">\n      &#x3C;time>{instance.fromNow()}&#x3C;/time>\n    &#x3C;/Tooltip>\n  );\n};\n\nconst AppLayout = () => (\n  &#x3C;Page title=\"My awesome app\">\n    &#x3C;TopPanel>\n      &#x3C;Headline title=\"My awesome app\" />\n    &#x3C;/TopPanel>\n    &#x3C;HorizontalSplit>\n      &#x3C;Left>\n        &#x3C;Sidebar />\n      &#x3C;/Left>\n      &#x3C;Right>\n        &#x3C;Content>\n          {children}\n        &#x3C;/Content>\n      &#x3C;/Right>\n    &#x3C;/HorizontalSplit>\n    &#x3C;Content>\n      &#x3C;CenteredRow>\n        &#x3C;h3 className=\"m-0\">Centered title&#x3C;/h3>\n      &#x3C;/CenteredRow>\n      &#x3C;article>\n        &#x3C;Headline title=\"Page headline\" subtitle=\"Subtitle\">\n          &#x3C;ButtonGroup>\n            &#x3C;Tooltip text=\"Copy text\" placement=\"top\">\n              &#x3C;IconButton icon=\"copy\" bsSize=\"sm\" />\n            &#x3C;/Tooltip>\n            &#x3C;Tooltip text=\"Share\" placement=\"top\">\n              &#x3C;IconButton icon=\"share\" bsSize=\"sm\" />\n            &#x3C;/Tooltip>\n          &#x3C;/ButtonGroup>\n        &#x3C;/Headline>\n        &#x3C;p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          Sed risus ultricies tristique nulla aliquet enim. Ante metus\n          dictum at tempor commodo ullamcorper.\n        &#x3C;/p>\n        &#x3C;SectionHeadline title=\"Section headline\" subtitle=\"Subtitle\" />\n        &#x3C;p>\n          Faucibus nisl tincidunt eget nullam non nisi est sit amet.\n          At augue eget arcu dictum varius duis. Cursus sit amet dictum\n          sit amet justo donec enim. Vestibulum morbi blandit cursus\n          risus at ultrices mi tempus. Curabitur gravida arcu ac \n          tortor dignissim. Eget nulla facilisi etiam dignissim diam quis enim.\n        &#x3C;/p>\n        &#x3C;p>A arcu cursus vitae congue mauris rhoncus aenean.&#x3C;/p>\n\n        &#x3C;hr />\n\n        &#x3C;footer>\n          &#x3C;Row className=\"text-right\">\n            &#x3C;Col xsOffset={8} xs={2}>\n              &#x3C;ValueLabel label=\"Author\" value=\"John Doe\" />\n            &#x3C;/Col>\n            &#x3C;Col xs={2}>\n              &#x3C;ValueLabel label=\"Published\" value={&#x3C;DateLabel date={date} />} />\n            &#x3C;/Col>\n          &#x3C;/Row>\n        &#x3C;/footer>\n      &#x3C;/article>\n    &#x3C;/Content>\n  &#x3C;/Page>\n)\n</code></pre>\n<p>You can see the example below how it looks in the page. </p>","frontmatter":{"id":"ui-layout","title":"Layout"}}},{"node":{"html":"<p>When you need to display a page or a component that depends on remote data you want to show a loading\nindicator while fetching the required resources.</p>\n<p>Using this component you can also display errors when the remote call returns an error response. </p>\n<h3>Example usage</h3>\n<pre><code class=\"language-javascript\">import { LoadingWrapper } from 'bandit-pouch';\n\nconst Page = ({ model }) => (\n  &#x3C;div>\n      &#x3C;h1>List page&#x3C;/h1>\n      &#x3C;ul>\n        {model.map(({ id, title }) => (\n          &#x3C;li key={id}>\n            &#x3C;p>{title}&#x3C;/p>\n          &#x3C;/li>\n        ))}\n      &#x3C;/ul>\n  &#x3C;/div>\n);\n\nexport default () => (\n    &#x3C;LoadingWrapper\n      component={Page}\n      loading={loading}\n      error={error}\n      model={model}\n    />\n);\n</code></pre>","frontmatter":{"id":"ui-loading-wrapper","title":"Loading Wrapper"}}},{"node":{"html":"<pre><code class=\"language-javascript\">import { NotificationList } from 'bandit-pouch';\n\n\nclass NotificationsExample extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = { alerts: [] };\n  }\n\n  onAddAlert(type, message) {\n    this.setState(state => ({\n      alerts: [...state.alerts, {\n        id: Date.now(),\n        bsStyle: type,\n        message,\n      }],\n    }));\n  }\n\n  onClearAlert(id) {\n    this.setState(state => ({\n      alerts: state.alerts.filter(alert => alert.id !== id),\n    }));\n  }\n\n  render() {\n    const { alerts = [] } = this.state;\n\n    return (\n      &#x3C;div>\n        &#x3C;p>Click the buttons bellow to create alerts&#x3C;/p>\n        &#x3C;ButtonGroup>\n          &#x3C;Button bsStyle=\"info\" onClick={() => this.onAddAlert('info', 'Info message')}>\n            Show info alert\n          &#x3C;/Button>\n          &#x3C;Button bsStyle=\"warning\" onClick={() => this.onAddAlert('warning', 'Warning message')}>\n            Show warning alert\n          &#x3C;/Button>\n          &#x3C;Button bsStyle=\"danger\" onClick={() => this.onAddAlert('danger', 'Danger message')}>\n            Show danger alert\n          &#x3C;/Button>\n        &#x3C;/ButtonGroup>\n\n        &#x3C;NotificationList\n          timeout={4} // timeout is in seconds\n          alerts={alerts} // list of alerts to display\n          clearAlert={id => this.onClearAlert(id)} // callback when an alert should be cleared\n        />\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>","frontmatter":{"id":"ui-notifications","title":"Notifications list"}}},{"node":{"html":"<p>This library uses <a href=\"https://github.com/jonjaques/react-loaders\">react-loaders</a> and\n<a href=\"https://github.com/ConnorAtherton/loaders.css\">loaders.css</a> to render loading components with\nnice animations.</p>\n<h3>Example usage</h3>\n<pre><code class=\"language-javascript\">import { Loader, CenteredLoader } from 'bandit-pouch';\n\n\nexport default () => (\n    &#x3C;div>\n      &#x3C;p>Simple loader wrapper inside a `div` container&#x3C;/p>\n      &#x3C;Loader type=\"ball-spin-fade-loader\" />\n      \n      &#x3C;p>Vertically and Horizontally centered loader&#x3C;/p>\n      &#x3C;CenteredLoader type=\"line-scale-pulse-out\" />\n    &#x3C;/div>\n);\n</code></pre>","frontmatter":{"id":"ui-loaders","title":"Loaders"}}},{"node":{"html":"<pre><code class=\"language-javascript\">import {\n  ErrorPage,\n  PageNotFound,\n} from 'bandit-pouch';\n\n\nconst AppLayout = () => (\n  &#x3C;>\n    &#x3C;ErrorPage\n      status=\"503\"\n      icon=\"exclamation-circle\"\n      className=\"text-danger\"\n      message=\"An error message\"\n    />\n    &#x3C;PageNotFound />\n  &#x3C;/>\n)\n</code></pre>","frontmatter":{"id":"ui-pages","title":"Error pages"}}}]}},"pageContext":{}}