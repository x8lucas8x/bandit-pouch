{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>You can use this component to wrap a label in abbreviation tags if a valid tooltip is provided.\nWe differentiate the abbr style depending on the type passed in so that the dotted\nline is shown properly on the metric labels.</p>\n<p>Here is an example with moment that would renders a tooltip in ISO 8601 format whereas the\nabbreviation would contain the time from.</p>\n<pre><code class=\"language-javascript\">import moment from 'moment';\nimport { Abbreviation } from 'bandit-pouch';\n\nexport default () => {\n  const date = moment().subtract(3, 'm');\n\n  return (\n    &#x3C;div>\n      &#x3C;p>\n        This example was shown\n        &#x26;nbsp;\n        &#x3C;Abbreviation\n          label={date.fromNow()}\n          tooltip={date.format('YYYY-MM-DD H:mm:ss')}\n        />\n      &#x3C;/p>\n    &#x3C;/div>\n  );\n};\n</code></pre>","frontmatter":{"id":"ui-abbreviation","title":"Abbreviation"}}},{"node":{"html":"<p>This module contains react components that can be used to define the page layout of you app.\nHere is the list of available components and how they can be used:</p>\n<pre><code class=\"language-javascript\">import {\n  Page,\n  Left,\n  Right,\n  Content,\n  TopPanel,\n  HorizontalSplit,\n} from 'bandit-pouch';\n\nconst Sidebar = () => (\n  // your sidebar component\n);\n\nconst AppLayout = () => (\n  &#x3C;Page title=\"My awesome app\">\n    &#x3C;TopPanel>\n      &#x3C;h1>My awesome app&#x3C;/h1> \n    &#x3C;/TopPanel>\n    &#x3C;HorizontalSplit>\n      &#x3C;Left>\n        &#x3C;Sidebar />\n      &#x3C;/Left>\n      &#x3C;Right>\n        &#x3C;Content>\n          {children}\n        &#x3C;/Content>\n      &#x3C;/Right>\n    &#x3C;/HorizontalSplit>\n  &#x3C;/Page>\n)\n</code></pre>\n<p>You can see the example below how it looks in the page. </p>","frontmatter":{"id":"ui-layout","title":"Layout"}}},{"node":{"html":"<pre><code class=\"language-javascript\">import { NotificationList } from 'bandit-pouch';\n\n\nclass NotificationsExample extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = { alerts: [] };\n  }\n\n  onAddAlert(type, message) {\n    this.setState(state => ({\n      alerts: [...state.alerts, {\n        id: Date.now(),\n        bsStyle: type,\n        message,\n      }],\n    }));\n  }\n\n  onClearAlert(id) {\n    this.setState(state => ({\n      alerts: state.alerts.filter(alert => alert.id !== id),\n    }));\n  }\n\n  render() {\n    const { alerts = [] } = this.state;\n\n    return (\n      &#x3C;div>\n        &#x3C;p>Click the buttons bellow to create alerts&#x3C;/p>\n        &#x3C;ButtonGroup>\n          &#x3C;Button bsStyle=\"info\" onClick={() => this.onAddAlert('info', 'Info message')}>\n            Show info alert\n          &#x3C;/Button>\n          &#x3C;Button bsStyle=\"warning\" onClick={() => this.onAddAlert('warning', 'Warning message')}>\n            Show warning alert\n          &#x3C;/Button>\n          &#x3C;Button bsStyle=\"danger\" onClick={() => this.onAddAlert('danger', 'Danger message')}>\n            Show danger alert\n          &#x3C;/Button>\n        &#x3C;/ButtonGroup>\n\n        &#x3C;NotificationList\n          timeout={4} // timeout is in seconds\n          alerts={alerts} // list of alerts to display\n          clearAlert={id => this.onClearAlert(id)} // callback when an alert should be cleared\n        />\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>","frontmatter":{"id":"ui-notifications","title":"Notifications list"}}},{"node":{"html":"<pre><code class=\"language-javascript\">import {\n  ErrorPage,\n  PageNotFound,\n} from 'bandit-pouch';\n\n\nconst AppLayout = () => (\n  &#x3C;>\n    &#x3C;ErrorPage icon=\"exclamation\" className=\"text-danger\">\n      &#x3C;p>An error message&#x3C;/p>\n    &#x3C;/ErrorPage>\n    &#x3C;PageNotFound />\n  &#x3C;/>\n)\n</code></pre>","frontmatter":{"id":"ui-pages","title":"Error pages"}}}]}},"pageContext":{}}